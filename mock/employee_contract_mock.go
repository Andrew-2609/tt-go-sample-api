// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/entity/employee_contract.go
//
// Generated by this command:
//
//	mockgen -source=./domain/entity/employee_contract.go -destination=./mock/employee_contract_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	entity "tt-go-sample-api/domain/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockGetEmployeesRepository is a mock of GetEmployeesRepository interface.
type MockGetEmployeesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetEmployeesRepositoryMockRecorder
}

// MockGetEmployeesRepositoryMockRecorder is the mock recorder for MockGetEmployeesRepository.
type MockGetEmployeesRepositoryMockRecorder struct {
	mock *MockGetEmployeesRepository
}

// NewMockGetEmployeesRepository creates a new mock instance.
func NewMockGetEmployeesRepository(ctrl *gomock.Controller) *MockGetEmployeesRepository {
	mock := &MockGetEmployeesRepository{ctrl: ctrl}
	mock.recorder = &MockGetEmployeesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetEmployeesRepository) EXPECT() *MockGetEmployeesRepositoryMockRecorder {
	return m.recorder
}

// ListEmployees mocks base method.
func (m *MockGetEmployeesRepository) ListEmployees(ctx context.Context, page, limit int32) ([]*entity.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployees", ctx, page, limit)
	ret0, _ := ret[0].([]*entity.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployees indicates an expected call of ListEmployees.
func (mr *MockGetEmployeesRepositoryMockRecorder) ListEmployees(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployees", reflect.TypeOf((*MockGetEmployeesRepository)(nil).ListEmployees), ctx, page, limit)
}

// MockWriteEmployeeRepository is a mock of WriteEmployeeRepository interface.
type MockWriteEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWriteEmployeeRepositoryMockRecorder
}

// MockWriteEmployeeRepositoryMockRecorder is the mock recorder for MockWriteEmployeeRepository.
type MockWriteEmployeeRepositoryMockRecorder struct {
	mock *MockWriteEmployeeRepository
}

// NewMockWriteEmployeeRepository creates a new mock instance.
func NewMockWriteEmployeeRepository(ctrl *gomock.Controller) *MockWriteEmployeeRepository {
	mock := &MockWriteEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockWriteEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteEmployeeRepository) EXPECT() *MockWriteEmployeeRepositoryMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockWriteEmployeeRepository) Register(ctx context.Context, employee *entity.Employee) (*entity.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, employee)
	ret0, _ := ret[0].(*entity.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockWriteEmployeeRepositoryMockRecorder) Register(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockWriteEmployeeRepository)(nil).Register), ctx, employee)
}
